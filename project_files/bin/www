/**
 * Module dependencies.
 */

const http = require("http");
const app = require("../src/app");
const logger = require("../src/utils/logger");
const config = require("../src/config");
const errorHandler = require("../src/utils/errorHandler");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.port);
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      logger.error(bind + " requires elevated privileges");
      process.exit(1);
    case "EADDRINUSE":
      logger.error(bind + " is already in use");
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  const env = process.env.NODE_ENV;
  logger.info(`The server initiated with ${env} configuration`);
  logger.info(`丘뫮잺The server listening on ${bind}`);
}

/**
 * Handling uncaughtException
 */
process.on("uncaughtException", (error) => {
  logger.error(`游댮 uncaughtException triggered`);
  logger.error(error);
  if (!errorHandler.isTrustedError(error)) {
    process.exit(1);
  }
});

/**
 * Graceful shutdonw
 */
process.on("SIGTERM", () => {
  logger.info("SIGTERM signal received.");
  logger.info("游리 Closing http server.");
  server.close(async () => {
    logger.info("游릭 Http server closed.");
    logger.info(`Shutting down dependent resources`);
    await app.shutdown();
    logger.info(`游릭 All dependent resources released`);
    logger.info(`游릭 Finally terminating the current node process.`);
    process.exit(0);
  });
});
